/**
*   FO version:     FOClassic: Brave New World
*   Contributor:    Sasabazmeg
*   File:           client_inventoryTracker.fos
*
*   Description:    It's just a pop-up when player acquires or looses items.
*                   Aim is to provide 21st century look and feel and QoL modules for FOClassic.
*/

#ifndef __INVENTORY_TRACKER__
#define __INVENTORY_TRACKER__

#include "sprite.fos"
#include "_defines.fos"
#include "_client_defines.fos"
#include "_macros.fos"
#include "_colors.fos"
#include "client_gui_h.fos"


CInventoryTracker inventoryTracker;// = CInventoryTracker();

//  Exported
void ToggleInventoryTracker() {
    inventoryTracker.enabled = !inventoryTracker.enabled;
}

// Exported
bool IsEnabled() {
    return inventoryTracker.enabled;
}

//  Exported
void InitInventoryTracker() {
    inventoryTracker = CInventoryTracker();
    inventoryTracker.width = 100;
    inventoryTracker.height = 30;
    inventoryTracker.posX = __ScreenWidth - inventoryTracker.width - 5;
    inventoryTracker.posY = __ScreenHeight / 2;
    inventoryTracker.colorCounterGained = COLOR_GREEN;           //  possible?! color of the progress texts, always white for visibility
    inventoryTracker.colorCounterLost = COLOR_RED;           //  possible?! color of the progress texts, always white for visibility
    inventoryTracker.colorItem = COLOR_RGB(0x88, 0x88, 0x88);
    inventoryTracker.colorBackground = COLOR_CHANGE_ALPHA(COLOR_RGB(0, 0, 0), 150);
    inventoryTracker.firstActivationDelay = 3000;   //  wait for a few seconds before first activation
    inventoryTracker.activeDuration = 7000;        //  let's start at 10 seconds
    inventoryTracker.fadeInDuration = 500;
    inventoryTracker.fadeOutDuration = 1500;
}

//  Exported
void DrawInventoryTracker() {
    if (inventoryTracker.enabled) {
        inventoryTracker.Draw();
    }
}

//  Exported
void ActivateInventoryTracker() {
    if (inventoryTracker.creationTime + inventoryTracker.firstActivationDelay < GetTick()) {
        //Message("InventoryTracker - activated");
        inventoryTracker.Activate();
    } else {
        //Message("InventoryTracker - not activated");
    }
}

//  Exported
void AddItemToInventoryTracker(ItemCl& item, int netGain) {
    //Message("InventoryTracker - item added: " + item.GetProtoId() + " x " + netGain);
    CInventoryTrackerItem invItem = CInventoryTrackerItem();
    invItem.activationTime = GetTick();
    invItem.itemPic = item.Proto.PicInv;
    invItem.count = netGain;
    inventoryTracker.items.insertLast(invItem);
}

//  Exported - Need to export so it activates between two logins
/**
*   Need to refresh the creation time, else quests will trigger after fast relogs.
*/
void RefreshQuestTracker() {
    inventoryTracker.active = false;
    inventoryTracker.creationTime = GetTick();
}

class CInventoryTrackerItem {
    int posX, posY;
    int count;
    uint itemPic;
    uint activationTime;
    uint backgroundColor, itemColor, counterColor;
};

class CInventoryTracker {
    bool enabled;                           //  use this to toggle on/off
    bool active;
    uint creationTime;                      //  time stamp to check against before activating
    uint firstActivationDelay;              //  time to wait before activating, so it does not trigger on log-in
    uint activationTime;                    //  last activation time stamp
    uint activeDuration;                    //  time in milis to remain visible after quest update shown
    uint fadeInDuration, fadeOutDuration;   //  fade durations
    int maxInventorySize = 5;
    uint colorBackground, colorItem, colorCounterGained, colorCounterLost;     //  colors
    uint backgroundColor, itemColor, counterColor;
    int posX, posY, width, height;
    int border = 3, spacing = 5;

    array<CInventoryTrackerItem> items;
    array<CInventoryTrackerItem> itemsInProcess;

    CInventoryTracker() {
        active = false;
        enabled = true;
        creationTime = GetTick();
    }

    void Draw() {
        if (!active)
            return;

        if (GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME)
            return;

        CritterCl@ chosen = GetChosen();
        if (!valid(chosen))
            return;

        ProcessItems();
        SelfDisableAfterDurationExpired();
        DrawPickedItems();
    }

    void ProcessItems() {
        if (!items.isEmpty()) {
            CInventoryTrackerItem@ first = items.first();
            first.activationTime = GetTick();
            itemsInProcess.insertFirst(first);
            items.removeFirst();
            if (itemsInProcess.length() > maxInventorySize) {
                itemsInProcess.removeLast();
            }
        }
        if (itemsInProcess.isEmpty()) {
            active = false;
        }
    }

    void SelfDisableAfterDurationExpired() {
        for (int i = 0; i < itemsInProcess.length(); i++) {
            if (active && (GetTick() + 100 > itemsInProcess[i].activationTime + activeDuration)) {
                //active = false;
                itemsInProcess.removeAt(i);
            }
        }
    }

    void SetColors() {
        for (int i = 0; i < itemsInProcess.length(); i++) {
            itemsInProcess[i].itemColor = colorItem;
            itemsInProcess[i].counterColor = itemsInProcess[i].count > 0 ? colorCounterGained : colorCounterLost;
            itemsInProcess[i].backgroundColor = colorBackground;
        }
    }

    void SetAlphaOfColors(CInventoryTrackerItem& item, float ratio) {
        uint8 itemAlpha = item.itemColor >> 24;
        item.itemColor = COLOR_CHANGE_ALPHA(item.itemColor, itemAlpha * ratio);

        uint8 counterAlpha = item.counterColor >> 24;
        item.counterColor = COLOR_CHANGE_ALPHA(item.counterColor, counterAlpha * ratio);
        item.counterColor = COLOR_CHANGE_ALPHA(item.counterColor, counterAlpha * ratio);

        uint8 backgroundAlpha = item.backgroundColor >> 24;
        item.backgroundColor = COLOR_CHANGE_ALPHA(item.backgroundColor, backgroundAlpha * ratio);
    }

    void DrawPickedItems() {
        if (!active)
            return;
        uint currentTime = GetTick();

        SetColors();

        for (int i = 0; i < itemsInProcess.length(); i++) {
            if (currentTime < itemsInProcess[i].activationTime + fadeInDuration) {
                FadeIn(itemsInProcess[i], currentTime);
            }
            if (currentTime > itemsInProcess[i].activationTime + activeDuration - fadeOutDuration) {
                FadeOut(itemsInProcess[i], currentTime);
            }
        }

        for (int i = 0; i < maxInventorySize; i++) {
            if (i < itemsInProcess.length()) {
                DrawItem(itemsInProcess[i], i * (spacing + 30));
            }
        }
    }

    void DrawItem(CInventoryTrackerItem& item, int positionShift) {
        //  Draw background
        DrawRectangle(posX, posY + positionShift, width, height, item.backgroundColor);
        //  Draw item
        int sprite = LoadSprite(item.itemPic, 0);
        DrawSprite(sprite, -1, posX + border, posY + border + positionShift, 30, 30, false, false, item.itemColor);
        //  Draw item count
        int countAbs = item.count > 0 ? item.count : -item.count;
        //  We got a bug here from client, that on split drop, negative would not be reported at all, place ? until fixed.
        if (countAbs != 0) {
            DrawText(" x " + countAbs, posX + border + 30, posY + border + positionShift, width - 2 * border - 30, 27, item.counterColor, FONT_TYPE_DIALOG, FONT_FLAG_CENTERY);
        } else {
            DrawText(" x ?", posX + border + 30, posY + border + positionShift, width - 2 * border - 30, 27, item.counterColor, FONT_TYPE_DIALOG, FONT_FLAG_CENTERY);
        }
    }


    void FadeIn(CInventoryTrackerItem& item, uint time) {
        uint relativeTime = time - item.activationTime;
        float percentage = (0.0f + relativeTime) / (0.0f + fadeInDuration) ;
        SetAlphaOfColors(item, percentage);
    }

    void FadeOut(CInventoryTrackerItem& item, uint time) {
        uint relativeTime = item.activationTime + activeDuration - time;
        float percentage = (0.0f + relativeTime) / fadeOutDuration;
        SetAlphaOfColors(item, percentage);
    }

    void DrawRectangle(int left, int top, int width, int height, int color) {
        array<int> background;
        // left-top
        background.insertLast(left);
        background.insertLast(top);
        background.insertLast(color);
        // left-bottom
        background.insertLast(left);
        background.insertLast(top + height);
        background.insertLast(color);
        // right-bottom
        background.insertLast(left + width);
        background.insertLast(top + height);
        background.insertLast(color);
        // right-top
        background.insertLast(left + width);
        background.insertLast(top);
        background.insertLast(color);
        //  draw the rectangle
        DrawPrimitive(DRAW_PRIMITIVE_TRIANGLEFAN, background);
    }

    void Activate() {
        activationTime = GetTick();
        active = true;
    }
};

#endif 	//	__INVENTORY_TRACKER__
